Imports: {
  import gate.*;
  import java.util.*;
}
Phase: firstpass
Options: control = appelt
Input: TermCandidate Token
Rule: LingFilter
Priority: 20
(
  ({Token.kind==word, Token.category =~ "^AQ"})*
  ({Token.kind==word, Token.category =~ "^N[CP]"})+
): match
-->
:match.TermCandidate = {rule= "LingFilter" },
{
  // Annotate last Token in TermCandidate as Head
  AnnotationSet matchAs = (gate.AnnotationSet)bindings.get("match");
  AnnotationSet tokAnnots = matchAs.get("Token").getContained(
    matchAs.firstNode().getOffset(),
    matchAs.lastNode().getOffset()
  );
  List<Annotation> tokAnnotList = gate.Utils.inDocumentOrder(tokAnnots);
  Annotation headTok = tokAnnotList.get(tokAnnotList.size()-1);
  FeatureMap features = Factory.newFeatureMap();
  features.put("rule", "LingFilter");
  outputAS.add(headTok.getStartNode(), headTok.getEndNode(), "Head", features);
}
